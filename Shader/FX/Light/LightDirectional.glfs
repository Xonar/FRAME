#version 330

//Textures of from other renderers
uniform sampler2D tDeferred1;
uniform sampler2D tDeferred2;
uniform sampler2D tDeferred3;

uniform vec3 uDirection;
uniform vec3 uDiffuse;
uniform vec3 uCamPos;

in vec2 fTex;
out vec3 col;

void main()
{
  //Get Deferred Terms
  ivec2 texelPos = ivec2(fTex * textureSize(tDeferred1, 0).xy);
  vec4 d1 = texelFetch(tDeferred1, texelPos, 0);
  vec4 d2 = texelFetch(tDeferred2, texelPos, 0);
  vec4 d3 = texelFetch(tDeferred3, texelPos, 0);

  //Calculate reflection vector and camera direction
  vec3 reflection = -reflect(uDirection, d2.xyz);
  vec3 camDir = normalize(uCamPos - d3.xyz);
  
  //Calculate Lighting
  float lambert = max(dot(d2.xyz, uDirection), 0);
  float specular = pow(max(dot(reflection, camDir), 0), d2.w) * d1.w;

  //Final Light
  col = uDiffuse * (lambert + specular);
}
