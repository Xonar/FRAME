#version 330

//Textures of from other renderers
uniform sampler2D tDeferred1;
uniform sampler2D tDeferred2;
uniform sampler2D tDepth;

uniform vec3 uDirection;
uniform vec3 uDiffuse;

in vec2 fTex;
in vec3 fCamDir;
out vec4 col;

void main()
{
  //Get Deferred Terms
  ivec2 texelPos = ivec2(fTex * textureSize(tDeferred1, 0).xy);
  vec4 d1 = texelFetch(tDeferred1, texelPos, 0);
  vec4 d2 = texelFetch(tDeferred2, texelPos, 0);

  //Calculate Normal
  vec3 normal = d2.xyz;

  //Calculate reflection vector
  vec3 reflection = -reflect(uDirection, normal);
  vec3 camDir = normalize(-fCamDir);
  
  //Calculate Lighting
  float lambert = max(dot(normal, uDirection), 0);
  float specular = pow(max(dot(reflection, camDir), 0), 50) * 1.f;

  //Final Light
  col.xyz = uDiffuse * (lambert + specular);
  col.w = 1.0f;
}
